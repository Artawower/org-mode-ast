#+TITLE: Org mode AST.

#+html: <span class="badge-buymeacoffee">
#+html: <a href="https://www.paypal.me/darkawower" title="Paypal" target="_blank"><img src="https://img.shields.io/badge/paypal-donate-blue.svg" alt="Buy Me A Coffee donate button" /></a>
#+html: </span>
#+html: <span class="badge-patreon">
#+html: <a href="https://patreon.com/artawower" target="_blank" title="Donate to this project using Patreon"><img src="https://img.shields.io/badge/patreon-donate-orange.svg" alt="Patreon donate button" /></a>
#+html: </span>
#+html:<a href="https://github.com/Artawower/org-mode-ast/actions/workflows/main.yaml/badge.svg" target="_blank" title="Github actions">
#+html: <img src="https://github.com/Artawower/org-mode-ast/actions/workflows/main.yaml/badge.svg" />
#+html:</a>
#+html: <a href="https://wakatime.com/badge/github/Artawower/org-mode-ast.svg" target="_blank" title="Spent time">
#+html: <img src="https://wakatime.com/badge/github/Artawower/org-mode-ast.svg" />
#+html: </a>

* Abstract syntax tree via typescript for org mode.

- No regexp
- Fast
- Minimum dependencies as possible
- Real tree structure
- Idempotency, which means reverse operations lead to the original state


* Why is there another org-mode parser?

Firstly, when i started building the org roam web implementation i faced with one big problem, there are no parsers which could satisfy all requirements that i need

Also, i figured out implementation a bit, and found that these very complex solutions, most of the time based on regexp, which are not good for parsing and readability, and also have poor performance.

This project completely ignore implementation from emacs data tree, cause i have been developing this code for my own purposes. I wanted to control every node and property which i have in my tree. Moreover, i wanted to have idempotency with converting from AST to text and vise versa. Right now, many parsers losing some characters, like newlines or extra spaces.

Of this requirements i want the following from this parser:
1. Full testing all possible nodes.
2. Development according to the TDD principles.
3. Easy to read.
4. There are small handlers for each node types
5. The structure of tree is very similar to visible result (including nested folding)
6. Each element of the tree has own range with begin and end positions.
7. All operations with the tree, such as formatting, auto-insert, etc. must be implemented as a separate logic with its own class.

* Also see
  
- [[https://github.com/rasendubi/uniorg][Uniorg - another one ast for org mode]] 

* Contribute

#+html: <span class="badge-buymeacoffee">
#+html: <a href="https://www.paypal.me/darkawower" title="Paypal"><img src="https://img.shields.io/badge/paypal-donate-blue.svg" alt="Buy Me A Coffee donate button" /></a>
#+html: </span>
#+html: <span class="badge-patreon">
#+html: <a href="https://patreon.com/artawower" title="Donate to this project using Patreon"><img src="https://img.shields.io/badge/patreon-donate-orange.svg" alt="Patreon donate button" /></a>
#+html: </span>


Every help is greatly appreciated. 
